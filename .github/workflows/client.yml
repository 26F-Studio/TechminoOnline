name: Client
on: [push, pull_request]

jobs:
  # Build client.so under linux operating systems.
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:

    # Setup golang compiler of version Go 1.x
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.12
      id: go

    # Install the dependencies of pkg-config.
    - name: Install dependencies
      run: |
        sudo apt update && sudo apt install pkg-config

    # Execute checkout to fetch the source code of the project.
    - name: Checkout source code
      uses: actions/checkout@v2

    # Checkout LuaJIT repository for dependencies.
    - name: Checkout LuaJIT
      uses: actions/checkout@v2
      with:
        path: luajit
        repository: LuaJIT/LuaJIT
        ref: v2.0.5

    # Execute build and generate client.so lua file.
    - name: Build
      env:
        PKG_CONFIG_PATH: ${{ github.workspace }}/pkgconfig/native
        CC: "gcc -fPIC"
        MAKE: "sudo make"
      run: |
        chmod +x ./cmd/client/build.sh &&
        ./cmd/client/build.sh client.so

    # Upload the built artifact as the build result.
    - name: Artifact
      uses: actions/upload-artifact@v2
      with:
          name: client-linux.so
          path: client.so

  # Cross building dynamic libraries on different platforms.
  crossbuilds:
    name: Build ${{ matrix.name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        - title: windows-x86-64
          name: Windows x86-64
          download: client-windows-x86-64.dll
          artifact: client.dll
          aptPackage: gcc-mingw-w64-x86-64
          prefix: x86_64-w64-mingw32
          cflags: "-fPIC"
          luaHostCC: "gcc -m64"
          luaOs: Windows
          luaTarget: luajit.exe
          goArch: amd64
          goOs: windows
        - title: windows-i386
          name: Windows i386
          download: client-windows-i386.dll
          artifact: client.dll
          aptPackage: gcc-mingw-w64-i686
          prefix: i686-w64-mingw32
          luaHostCC: "gcc -m32"
          cflags: "-march=i686 -fPIC"
          luaOs: Windows
          luaTarget: luajit.exe
          goArch: "386"
          goOs: windows
    steps:

    # Setup golang compiler of version Go 1.x
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.12
      id: go

    # Install the dependencies of pkg-config and mingw64-w64.
    - name: Install dependencies
      run: |
        sudo apt update && sudo apt install pkg-config ${{ matrix.aptPackage }} gcc-multilib

    # Execute checkout to fetch the source code of the project.
    - name: Checkout source code
      uses: actions/checkout@v2

    # Checkout LuaJIT repository for dependencies.
    - name: Checkout LuaJIT
      uses: actions/checkout@v2
      with:
        path: luajit
        repository: LuaJIT/LuaJIT
        ref: v2.0.5

    # Execute build and generate client.so lua file.
    - name: Build
      env:
        PKG_CONFIG_PATH: ${{ github.workspace }}/pkgconfig/crossbuild
        HOST_CC: ${{ matrix.luaHostCC }}
        XCFLAGS: ${{ matrix.cflags }}
        CROSS: "${{ matrix.prefix }}-"
        TARGET_SYS: ${{ matrix.luaOs }}
        FILE_T: ${{ matrix.luaTarget }}
        CC: "${{ matrix.prefix }}-gcc ${{ matrix.cflags }}"
        CXX: "${{ matrix.prefix }}-g++ ${{ matrix.cflags }}"
        MAKE: "sudo make --trace"
        GOOS: ${{ matrix.goOs }}
        GOARCH: ${{ matrix.goArch }}
      run: |
        chmod +x ./cmd/client/build.sh &&
        ./cmd/client/build.sh ${{ matrix.artifact }}

    # Upload the built artifact as the build result.
    - name: Artifact
      uses: actions/upload-artifact@v2
      with:
          name: ${{ matrix.download }}
          path: ${{ matrix.artifact }}
