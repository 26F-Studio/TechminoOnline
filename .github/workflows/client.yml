name: Client
on: [push, pull_request]

jobs:
  # Build client.so under linux operating systems.
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:

    # Setup golang compiler of version Go 1.x
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.13
      id: go

    # Install the dependencies of pkg-config.
    - name: Install dependencies
      run: |
        sudo apt update && sudo apt install pkg-config

    # Execute checkout to fetch the source code of the project.
    - name: Checkout source code
      uses: actions/checkout@v2

    # Checkout LuaJIT repository for dependencies.
    - name: Checkout LuaJIT
      uses: actions/checkout@v2
      with:
        path: luajit
        repository: LuaJIT/LuaJIT
        ref: v2.1

    # Execute build and generate client.so lua file.
    - name: Build
      env:
        PKG_CONFIG_PATH: ${{ github.workspace }}/cmd/client
        CC: "gcc -fPIC"
        MAKE: "sudo make"
      run: |
        chmod +x ./cmd/client/build.sh &&
        ./cmd/client/build.sh client.so

    # Upload the built artifact as the build result.
    - name: Artifact
      uses: actions/upload-artifact@v2
      with:
          name: client-linux.so
          path: client.so

  # Build client.dll under windows operating system.
  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:

    # Execute checkout to fetch the source code of the project.
    - name: Checkout source code
      uses: actions/checkout@v2

    # Checkout LuaJIT repository for dependencies.
    - name: Checkout LuaJIT
      uses: actions/checkout@v2
      with:
        path: luajit
        repository: LuaJIT/LuaJIT
        ref: v2.1

    # Prepare MinGW environment for connector building.
    - name: Checkout MinGW
      uses: eine/setup-msys2@v0
      with:
        msystem: MSYS
        update: true

    # Execute build and generate the techmino.client.dll lua file.
    - name: Build
      shell: msys2 {0}
      run: ./cmd/client/mingw64.sh

    # Upload the built artifact as the build result.
    - name: Artifact
      uses: actions/upload-artifact@v2
      with:
          name: client-windows.dll
          path: client.dll
