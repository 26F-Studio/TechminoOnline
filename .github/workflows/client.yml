name: Client
on: [push, pull_request]

jobs:
  # Build client.so under linux operating systems.
  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    steps:

    # Setup golang compiler of version Go 1.x
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.12
      id: go

    # Install the dependencies of pkg-config.
    - name: Install dependencies
      run: |
        sudo apt update && sudo apt install pkg-config

    # Execute checkout to fetch the source code of the project.
    - name: Checkout source code
      uses: actions/checkout@v2

    # Checkout LuaJIT repository for dependencies.
    - name: Checkout LuaJIT
      uses: actions/checkout@v2
      with:
        path: luajit
        repository: LuaJIT/LuaJIT
        ref: v2.0.5

    # Execute build and generate client.so lua file.
    - name: Build
      env:
        PKG_CONFIG_PATH: ${{ github.workspace }}/pkgconfig/native
        CC: "gcc -fPIC"
        MAKE: "sudo make"
      run: |
        chmod +x ./cmd/client/build.sh &&
        ./cmd/client/build.sh client.so

    # Upload the built artifact as the build result.
    - name: Artifact
      uses: actions/upload-artifact@v2
      with:
          name: client-linux.so
          path: client.so

  # Build client.dll using cross build method.
  build-windows:
    name: Build Windows
    runs-on: ubuntu-latest
    steps:

    # Setup golang compiler of version Go 1.x
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.12
      id: go

    # Install the dependencies of pkg-config and mingw64-w64.
    - name: Install dependencies
      run: |
        sudo apt update && sudo apt install pkg-config gcc-mingw-w64-x86-64 gcc-multilib

    # Execute checkout to fetch the source code of the project.
    - name: Checkout source code
      uses: actions/checkout@v2

    # Checkout LuaJIT repository for dependencies.
    - name: Checkout LuaJIT
      uses: actions/checkout@v2
      with:
        path: luajit
        repository: LuaJIT/LuaJIT
        ref: v2.0.5

    # Execute build and generate client.so lua file.
    - name: Build
      env:
        PKG_CONFIG_PATH: ${{ github.workspace }}/pkgconfig/crossbuild
        HOST_CC: "gcc -m64"
        XCFLAGS: "-fPIC"
        CROSS: "x86_64-w64-mingw32-"
        TARGET_SYS: "Windows"
        FILE_T: "luajit.exe"
        CC: "x86_64-w64-mingw32-gcc -fPIC"
        MAKE: "sudo make --trace"
        GOOS: "windows"
      run: |
        chmod +x ./cmd/client/build.sh &&
        ./cmd/client/build.sh client.dll

    # Upload the built artifact as the build result.
    - name: Artifact
      uses: actions/upload-artifact@v2
      with:
          name: client-windows.dll
          path: client.dll
